// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Profile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Profile", id.toString(), this);
    }
  }

  static load(id: string): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value!.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get cid(): string {
    let value = this.get("cid");
    return value!.toString();
  }

  set cid(value: string) {
    this.set("cid", Value.fromString(value));
  }
}

export class Post extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Post entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Post must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Post", id.toString(), this);
    }
  }

  static load(id: string): Post | null {
    return changetype<Post | null>(store.get("Post", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get cid(): string {
    let value = this.get("cid");
    return value!.toString();
  }

  set cid(value: string) {
    this.set("cid", Value.fromString(value));
  }
}

export class TierSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TierSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TierSet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TierSet", id.toString(), this);
    }
  }

  static load(id: string): TierSet | null {
    return changetype<TierSet | null>(store.get("TierSet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get tierSetId(): BigInt {
    let value = this.get("tierSetId");
    return value!.toBigInt();
  }

  set tierSetId(value: BigInt) {
    this.set("tierSetId", Value.fromBigInt(value));
  }

  get prices(): Array<BigInt> | null {
    let value = this.get("prices");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set prices(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("prices");
    } else {
      this.set("prices", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get cids(): Array<string> | null {
    let value = this.get("cids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cids(value: Array<string> | null) {
    if (!value) {
      this.unset("cids");
    } else {
      this.set("cids", Value.fromStringArray(<Array<string>>value));
    }
  }

  get deprecated(): Array<boolean> | null {
    let value = this.get("deprecated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBooleanArray();
    }
  }

  set deprecated(value: Array<boolean> | null) {
    if (!value) {
      this.unset("deprecated");
    } else {
      this.set("deprecated", Value.fromBooleanArray(<Array<boolean>>value));
    }
  }

  get supportedCurrencies(): Array<Bytes> | null {
    let value = this.get("supportedCurrencies");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set supportedCurrencies(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("supportedCurrencies");
    } else {
      this.set(
        "supportedCurrencies",
        Value.fromBytesArray(<Array<Bytes>>value)
      );
    }
  }

  get currencyMultipliers(): Array<BigInt> | null {
    let value = this.get("currencyMultipliers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set currencyMultipliers(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("currencyMultipliers");
    } else {
      this.set(
        "currencyMultipliers",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }
}

export class SubscriptionProfile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubscriptionProfile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubscriptionProfile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubscriptionProfile", id.toString(), this);
    }
  }

  static load(id: string): SubscriptionProfile | null {
    return changetype<SubscriptionProfile | null>(
      store.get("SubscriptionProfile", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tierSetId(): BigInt {
    let value = this.get("tierSetId");
    return value!.toBigInt();
  }

  set tierSetId(value: BigInt) {
    this.set("tierSetId", Value.fromBigInt(value));
  }

  get contribution(): BigInt {
    let value = this.get("contribution");
    return value!.toBigInt();
  }

  set contribution(value: BigInt) {
    this.set("contribution", Value.fromBigInt(value));
  }
}

export class SubscriptionEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubscriptionEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubscriptionEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubscriptionEntity", id.toString(), this);
    }
  }

  static load(id: string): SubscriptionEntity | null {
    return changetype<SubscriptionEntity | null>(
      store.get("SubscriptionEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get tierId(): BigInt {
    let value = this.get("tierId");
    return value!.toBigInt();
  }

  set tierId(value: BigInt) {
    this.set("tierId", Value.fromBigInt(value));
  }

  get subscriber(): Bytes {
    let value = this.get("subscriber");
    return value!.toBytes();
  }

  set subscriber(value: Bytes) {
    this.set("subscriber", Value.fromBytes(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get expiration(): BigInt {
    let value = this.get("expiration");
    return value!.toBigInt();
  }

  set expiration(value: BigInt) {
    this.set("expiration", Value.fromBigInt(value));
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    return value!.toBoolean();
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }
}
