// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EditTierSet extends ethereum.Event {
  get params(): EditTierSet__Params {
    return new EditTierSet__Params(this);
  }
}

export class EditTierSet__Params {
  _event: EditTierSet;

  constructor(event: EditTierSet) {
    this._event = event;
  }

  get profileId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tierSetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewTierSet extends ethereum.Event {
  get params(): NewTierSet__Params {
    return new NewTierSet__Params(this);
  }
}

export class NewTierSet__Params {
  _event: NewTierSet;

  constructor(event: NewTierSet) {
    this._event = event;
  }

  get profileId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tierSetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SupportedCurrencyAdded extends ethereum.Event {
  get params(): SupportedCurrencyAdded__Params {
    return new SupportedCurrencyAdded__Params(this);
  }
}

export class SupportedCurrencyAdded__Params {
  _event: SupportedCurrencyAdded;

  constructor(event: SupportedCurrencyAdded) {
    this._event = event;
  }

  get profileId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tierSetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get priceMultiplier(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SupportedCurrencyRemoved extends ethereum.Event {
  get params(): SupportedCurrencyRemoved__Params {
    return new SupportedCurrencyRemoved__Params(this);
  }
}

export class SupportedCurrencyRemoved__Params {
  _event: SupportedCurrencyRemoved;

  constructor(event: SupportedCurrencyRemoved) {
    this._event = event;
  }

  get profileId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tierSetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class BBTiers__getTierResult {
  value0: string;
  value1: BigInt;
  value2: boolean;

  constructor(value0: string, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getValue0(): string {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): boolean {
    return this.value2;
  }
}

export class BBTiers__getTierSetResult {
  value0: Array<BigInt>;
  value1: Array<string>;
  value2: Array<boolean>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<string>,
    value2: Array<boolean>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromStringArray(this.value1));
    map.set("value2", ethereum.Value.fromBooleanArray(this.value2));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<string> {
    return this.value1;
  }

  getValue2(): Array<boolean> {
    return this.value2;
  }
}

export class BBTiers extends ethereum.SmartContract {
  static bind(address: Address): BBTiers {
    return new BBTiers("BBTiers", address);
  }

  createTiers(
    profileId: BigInt,
    prices: Array<BigInt>,
    cids: Array<string>,
    deprecated: Array<boolean>,
    supportedCurrencies: Array<Address>,
    priceMultipliers: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "createTiers",
      "createTiers(uint256,uint256[],string[],bool[],address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigIntArray(prices),
        ethereum.Value.fromStringArray(cids),
        ethereum.Value.fromBooleanArray(deprecated),
        ethereum.Value.fromAddressArray(supportedCurrencies),
        ethereum.Value.fromUnsignedBigIntArray(priceMultipliers)
      ]
    );

    return result[0].toBigInt();
  }

  try_createTiers(
    profileId: BigInt,
    prices: Array<BigInt>,
    cids: Array<string>,
    deprecated: Array<boolean>,
    supportedCurrencies: Array<Address>,
    priceMultipliers: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createTiers",
      "createTiers(uint256,uint256[],string[],bool[],address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigIntArray(prices),
        ethereum.Value.fromStringArray(cids),
        ethereum.Value.fromBooleanArray(deprecated),
        ethereum.Value.fromAddressArray(supportedCurrencies),
        ethereum.Value.fromUnsignedBigIntArray(priceMultipliers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrencyMultiplier(
    profileId: BigInt,
    tierSetId: BigInt,
    currency: Address
  ): BigInt {
    let result = super.call(
      "getCurrencyMultiplier",
      "getCurrencyMultiplier(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigInt(tierSetId),
        ethereum.Value.fromAddress(currency)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCurrencyMultiplier(
    profileId: BigInt,
    tierSetId: BigInt,
    currency: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrencyMultiplier",
      "getCurrencyMultiplier(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigInt(tierSetId),
        ethereum.Value.fromAddress(currency)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTier(
    profileId: BigInt,
    tierSetId: BigInt,
    tierId: BigInt,
    currency: Address
  ): BBTiers__getTierResult {
    let result = super.call(
      "getTier",
      "getTier(uint256,uint256,uint256,address):(string,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigInt(tierSetId),
        ethereum.Value.fromUnsignedBigInt(tierId),
        ethereum.Value.fromAddress(currency)
      ]
    );

    return new BBTiers__getTierResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_getTier(
    profileId: BigInt,
    tierSetId: BigInt,
    tierId: BigInt,
    currency: Address
  ): ethereum.CallResult<BBTiers__getTierResult> {
    let result = super.tryCall(
      "getTier",
      "getTier(uint256,uint256,uint256,address):(string,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigInt(tierSetId),
        ethereum.Value.fromUnsignedBigInt(tierId),
        ethereum.Value.fromAddress(currency)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BBTiers__getTierResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  getTierSet(profileId: BigInt, tierSetId: BigInt): BBTiers__getTierSetResult {
    let result = super.call(
      "getTierSet",
      "getTierSet(uint256,uint256):(uint256[],string[],bool[])",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigInt(tierSetId)
      ]
    );

    return new BBTiers__getTierSetResult(
      result[0].toBigIntArray(),
      result[1].toStringArray(),
      result[2].toBooleanArray()
    );
  }

  try_getTierSet(
    profileId: BigInt,
    tierSetId: BigInt
  ): ethereum.CallResult<BBTiers__getTierSetResult> {
    let result = super.tryCall(
      "getTierSet",
      "getTierSet(uint256,uint256):(uint256[],string[],bool[])",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigInt(tierSetId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BBTiers__getTierSetResult(
        value[0].toBigIntArray(),
        value[1].toStringArray(),
        value[2].toBooleanArray()
      )
    );
  }

  isCurrencySupported(
    profileId: BigInt,
    tierSetId: BigInt,
    currency: Address
  ): boolean {
    let result = super.call(
      "isCurrencySupported",
      "isCurrencySupported(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigInt(tierSetId),
        ethereum.Value.fromAddress(currency)
      ]
    );

    return result[0].toBoolean();
  }

  try_isCurrencySupported(
    profileId: BigInt,
    tierSetId: BigInt,
    currency: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCurrencySupported",
      "isCurrencySupported(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigInt(tierSetId),
        ethereum.Value.fromAddress(currency)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalTierSets(profileId: BigInt): BigInt {
    let result = super.call(
      "totalTierSets",
      "totalTierSets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(profileId)]
    );

    return result[0].toBigInt();
  }

  try_totalTierSets(profileId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalTierSets",
      "totalTierSets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(profileId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalTiers(profileId: BigInt, tierSetId: BigInt): BigInt {
    let result = super.call(
      "totalTiers",
      "totalTiers(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigInt(tierSetId)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalTiers(
    profileId: BigInt,
    tierSetId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalTiers",
      "totalTiers(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigInt(tierSetId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get bbProfiles(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateTiersCall extends ethereum.Call {
  get inputs(): CreateTiersCall__Inputs {
    return new CreateTiersCall__Inputs(this);
  }

  get outputs(): CreateTiersCall__Outputs {
    return new CreateTiersCall__Outputs(this);
  }
}

export class CreateTiersCall__Inputs {
  _call: CreateTiersCall;

  constructor(call: CreateTiersCall) {
    this._call = call;
  }

  get profileId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get prices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get cids(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get deprecated(): Array<boolean> {
    return this._call.inputValues[3].value.toBooleanArray();
  }

  get supportedCurrencies(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get priceMultipliers(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class CreateTiersCall__Outputs {
  _call: CreateTiersCall;

  constructor(call: CreateTiersCall) {
    this._call = call;
  }

  get tierSetId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EditTiersCall extends ethereum.Call {
  get inputs(): EditTiersCall__Inputs {
    return new EditTiersCall__Inputs(this);
  }

  get outputs(): EditTiersCall__Outputs {
    return new EditTiersCall__Outputs(this);
  }
}

export class EditTiersCall__Inputs {
  _call: EditTiersCall;

  constructor(call: EditTiersCall) {
    this._call = call;
  }

  get profileId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tierSetId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get prices(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get cids(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get deprecated(): Array<boolean> {
    return this._call.inputValues[4].value.toBooleanArray();
  }
}

export class EditTiersCall__Outputs {
  _call: EditTiersCall;

  constructor(call: EditTiersCall) {
    this._call = call;
  }
}

export class SetSupportedCurrenciesCall extends ethereum.Call {
  get inputs(): SetSupportedCurrenciesCall__Inputs {
    return new SetSupportedCurrenciesCall__Inputs(this);
  }

  get outputs(): SetSupportedCurrenciesCall__Outputs {
    return new SetSupportedCurrenciesCall__Outputs(this);
  }
}

export class SetSupportedCurrenciesCall__Inputs {
  _call: SetSupportedCurrenciesCall;

  constructor(call: SetSupportedCurrenciesCall) {
    this._call = call;
  }

  get profileId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tierSetId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get supportedCurrencies(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get priceMultipliers(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class SetSupportedCurrenciesCall__Outputs {
  _call: SetSupportedCurrenciesCall;

  constructor(call: SetSupportedCurrenciesCall) {
    this._call = call;
  }
}
