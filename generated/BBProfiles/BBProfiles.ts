// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EditProfile extends ethereum.Event {
  get params(): EditProfile__Params {
    return new EditProfile__Params(this);
  }
}

export class EditProfile__Params {
  _event: EditProfile;

  constructor(event: EditProfile) {
    this._event = event;
  }

  get profileId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get cid(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class NewProfile extends ethereum.Event {
  get params(): NewProfile__Params {
    return new NewProfile__Params(this);
  }
}

export class NewProfile__Params {
  _event: NewProfile;

  constructor(event: NewProfile) {
    this._event = event;
  }

  get profileId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get cid(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class BBProfiles__getProfileResult {
  value0: Address;
  value1: Address;
  value2: string;

  constructor(value0: Address, value1: Address, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }

  getValue2(): string {
    return this.value2;
  }
}

export class BBProfiles extends ethereum.SmartContract {
  static bind(address: Address): BBProfiles {
    return new BBProfiles("BBProfiles", address);
  }

  createProfile(owner: Address, receiver: Address, cid: string): BigInt {
    let result = super.call(
      "createProfile",
      "createProfile(address,address,string):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromString(cid)
      ]
    );

    return result[0].toBigInt();
  }

  try_createProfile(
    owner: Address,
    receiver: Address,
    cid: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createProfile",
      "createProfile(address,address,string):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromString(cid)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwnersProfiles(owner: Address): Array<BigInt> {
    let result = super.call(
      "getOwnersProfiles",
      "getOwnersProfiles(address):(uint256[])",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigIntArray();
  }

  try_getOwnersProfiles(owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getOwnersProfiles",
      "getOwnersProfiles(address):(uint256[])",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getProfile(profileId: BigInt): BBProfiles__getProfileResult {
    let result = super.call(
      "getProfile",
      "getProfile(uint256):(address,address,string)",
      [ethereum.Value.fromUnsignedBigInt(profileId)]
    );

    return new BBProfiles__getProfileResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toString()
    );
  }

  try_getProfile(
    profileId: BigInt
  ): ethereum.CallResult<BBProfiles__getProfileResult> {
    let result = super.tryCall(
      "getProfile",
      "getProfile(uint256):(address,address,string)",
      [ethereum.Value.fromUnsignedBigInt(profileId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BBProfiles__getProfileResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toString()
      )
    );
  }

  ownersTotalProfiles(owner: Address): BigInt {
    let result = super.call(
      "ownersTotalProfiles",
      "ownersTotalProfiles(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_ownersTotalProfiles(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownersTotalProfiles",
      "ownersTotalProfiles(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalProfiles(): BigInt {
    let result = super.call("totalProfiles", "totalProfiles():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalProfiles(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalProfiles",
      "totalProfiles():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateProfileCall extends ethereum.Call {
  get inputs(): CreateProfileCall__Inputs {
    return new CreateProfileCall__Inputs(this);
  }

  get outputs(): CreateProfileCall__Outputs {
    return new CreateProfileCall__Outputs(this);
  }
}

export class CreateProfileCall__Inputs {
  _call: CreateProfileCall;

  constructor(call: CreateProfileCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get cid(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CreateProfileCall__Outputs {
  _call: CreateProfileCall;

  constructor(call: CreateProfileCall) {
    this._call = call;
  }

  get profileId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EditProfileCall extends ethereum.Call {
  get inputs(): EditProfileCall__Inputs {
    return new EditProfileCall__Inputs(this);
  }

  get outputs(): EditProfileCall__Outputs {
    return new EditProfileCall__Outputs(this);
  }
}

export class EditProfileCall__Inputs {
  _call: EditProfileCall;

  constructor(call: EditProfileCall) {
    this._call = call;
  }

  get profileId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get cid(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class EditProfileCall__Outputs {
  _call: EditProfileCall;

  constructor(call: EditProfileCall) {
    this._call = call;
  }
}
